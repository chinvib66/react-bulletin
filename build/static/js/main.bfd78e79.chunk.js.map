{"version":3,"sources":["components/Note.js","components/Board.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","edit","bind","assertThisInitialized","remove","save","renderForm","renderDisplay","randomBetween","style","right","window","innerWidth","top","innerHeight","x","y","s","Math","ceil","random","_newText","focus","nextProps","nextState","children","setState","onRemove","index","e","preventDefault","onChange","value","_this2","react_default","a","createElement","className","onSubmit","type","ref","input","defaultValue","id","react_draggable_default","onClick","React","Component","Board","notes","add","eachNote","update","nextId","self","count","fetch","concat","then","response","json","split","forEach","sentence","substring","text","prevState","toConsumableArray","note","uniqueId","newText","i","console","log","map","objectSpread","filter","components_Note","key","Boolean","location","hostname","match","ReactDOM","render","components_Board","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bfd78e79.chunk.js","sourcesContent":["import React from 'react';\nimport Draggable from 'react-draggable';\n\nclass Note extends React.Component{\n    constructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tediting: false\n\t\t}\n\t\tthis.edit = this.edit.bind(this)\n\t\tthis.remove = this.remove.bind(this)\n\t\tthis.save = this.save.bind(this)\n\t\tthis.renderForm = this.renderForm.bind(this)\n\t\tthis.renderDisplay = this.renderDisplay.bind(this)\n\t\tthis.randomBetween = this.randomBetween.bind(this)\n    }\n    componentWillMount() {\n\t\tthis.style = {\n\t\t\tright: this.randomBetween(0, window.innerWidth - 150, 'px'),\n\t\t\ttop: this.randomBetween(0, window.innerHeight - 150, 'px'),\n\t\t}\n    }\n    randomBetween(x, y, s) {\n\t\treturn x + Math.ceil(Math.random() * (y-x)) + s\n    }\n    componentDidUpdate() {\n\t\tvar textArea\n\t\tif(this.state.editing) {\n\t\t\ttextArea = this._newText\n\t\t\ttextArea.focus()\n\t\t\t//textArea.select()\n\t\t}\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n\t\treturn (\n\t\t\tthis.props.children !== nextProps.children || this.state !== nextState\n\t\t)\n    }\n    edit() {\n\t\tthis.setState({\n\t\t\tediting: true\n\t\t})\n\t}\n\n\tremove() {\n\t\tthis.props.onRemove(this.props.index)\n    }\n\n    save(e) {\n\t\te.preventDefault()\n\t\tthis.props.onChange(this._newText.value, this.props.index)\n\t\tthis.setState({\n\t\t\tediting: false\n\t\t})\n    }\n    renderForm() {\n\t\treturn (\n\t\t\t<div className=\"note\" style={this.style}>\n\t\t\t\t<form onSubmit={this.save}>\n                        <textarea type=\"textarea\" ref={input => this._newText = input}\n                                            defaultValue={this.props.children}></textarea>\n\t\t\t\t\t<button id=\"save\">S</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n    }\n    renderDisplay() {\n\t\treturn (\n            <Draggable>\n\t\t\t\t\t\t\t<div className=\"note\" style={this.style}>\n\t\t\t\t\t\t\t\t<p>{this.props.children}</p>\n\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t<button onClick={this.edit} id=\"edit\">E</button>\n\t\t\t\t\t\t\t\t\t<button onClick={this.remove} id=\"remove\">D</button>\n\t\t\t\t\t\t\t\t</span>\t\t\n\t\t\t\t\t\t\t</div>\n            </Draggable>\n\t\t)\n\t}\n\trender() {\n\t\treturn this.state.editing ? this.renderForm() : this.renderDisplay()\n\t}\n}\nexport default Note","import React from 'react'\nimport Note from './Note'\n\nclass Board extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tnotes: []\n\t\t}\n\t\tthis.add = this.add.bind(this)\n\t\tthis.eachNote = this.eachNote.bind(this)\n\t\tthis.update = this.update.bind(this)\n\t\tthis.remove = this.remove.bind(this)\n\t\tthis.nextId = this.nextId.bind(this)\n\t}\n\n\tcomponentWillMount() {\n\t\tvar self = this\n\t\tif(this.props.count) {\n\t\t\tfetch(`https://baconipsum.com/api/?type=all-meat&sentences=${this.props.count}`)\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(json => json[0]\n\t\t\t\t\t\t\t\t.split('. ')\n\t\t\t\t\t\t\t\t.forEach(sentence => self.add(sentence.substring(0, 25))))\n\t\t}\n\t}\n\n\tadd(text) {\n\t\tthis.setState(prevState => ({\n\t\t\tnotes: [\n\t\t\t\t...prevState.notes,\n\t\t\t\t{\n\t\t\t\t\tid: this.nextId(),\n\t\t\t\t\tnote: text\n\t\t\t\t}\n\t\t\t]\n\t\t}))\n\t}\n\n\tnextId() {\n\t\tthis.uniqueId = this.uniqueId || 0\n\t\treturn this.uniqueId++\n\t}\n\n\tupdate(newText, i) {\n\t\tconsole.log('updating item at index', i, newText)\n\t\tthis.setState(prevState => ({\n\t\t\tnotes: prevState.notes.map(\n\t\t\t\tnote => (note.id !== i) ? note : {...note, note: newText}\n\t\t\t)\n\t\t}))\n\t}\n\n\tremove(id) {\n\t\tconsole.log('removing item at', id)\n\t\tthis.setState(prevState => ({\n\t\t\tnotes: prevState.notes.filter(note => note.id !== id)\n\t\t}))\n\t}\n\n\teachNote(note, i) {\n\t\treturn (\n\t\t\t<Note key={note.id}\n\t\t\t\t  index={note.id}\n\t\t\t\t  onChange={this.update}\n\t\t\t\t  onRemove={this.remove}>\n\t\t\t\t  {note.note}\n\t\t    </Note>\n\t\t)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"board\">\n\t\t\t\t{this.state.notes.map(this.eachNote)}\n\t\t\t\t<button onClick={this.add.bind(null, \"New Note\")}\n\t\t\t\t\t\tid=\"add\">\n\t\t\t\t\t+   \n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Board","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './components/Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board count={50} />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}